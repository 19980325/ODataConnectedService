// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.

using EnvDTE;
using EnvDTE80;
using Microsoft.AspNet.Scaffolding;
using Microsoft.AspNet.Scaffolding.Core.Metadata;

namespace System.Web.OData.Design.Scaffolding.Metadata
{
    /// <summary>
    /// Metadata about the model properties.
    /// </summary>
    [Serializable]
    public sealed class CodeModelPropertyMetadata : PropertyMetadata
    {
        public CodeModelPropertyMetadata()
        {
        }

        public CodeModelPropertyMetadata(CodeProperty property)
        {
            if (property == null)
            {
                throw new ArgumentNullException("property");
            }

            PropertyName = property.Name;
            TypeName = property.Type.AsFullName;
            ShortTypeName = property.Type.AsString;
            IsPrimaryKey = IsPropertyPrimaryKey(property);
            IsAutoGenerated = IsPrimaryKey;
            IsReadOnly = !property.HasPublicSetter();
            Scaffold = IsScaffoldColumn(property);
        }

        /// <summary>
        /// This function verifies if the specified property is a primary key based on common conventions. The result
        /// returned by this function may not be accurate. In order to get accurate results for primary key properties
        /// <see cref="EntityMetadata"/> should be used.
        /// </summary>
        private static bool IsPropertyPrimaryKey(CodeProperty propertyType)
        {
            if (String.Equals(propertyType.Name, "id", StringComparison.OrdinalIgnoreCase))
            {  // EF Code First convention
                return true;
            }

            if (String.Equals(propertyType.Name, propertyType.Parent.Name + "id", StringComparison.OrdinalIgnoreCase))
            {  // EF Code First convention
                return true;
            }

            foreach (CodeAttribute attribute in propertyType.Attributes)
            {
                // WCF RIA Services and EF Code First explicit
                if (String.Equals(attribute.FullName, TypeNames.KeyAttributeTypeName, StringComparison.Ordinal))
                {
                    return true;
                }

                // EF traditional
                if (String.Equals(attribute.FullName, TypeNames.EdmScalarPropertyAttributeTypeName, StringComparison.Ordinal))
                {
                    if (IsPropertyValuePresent(attribute: attribute,
                                               name: "EntityKeyProperty",
                                               value: "true"))
                    {
                        return true;
                    }
                }

                // LINQ to SQL
                if (String.Equals(attribute.FullName, TypeNames.ColumnAttributeTypeName, StringComparison.Ordinal))
                {
                    if (IsPropertyValuePresent(attribute: attribute,
                                               name: "IsPrimaryKey",
                                               value: "true"))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        // Helper function to verify if the specified attribute contains a property with the specified name and value
        private static bool IsPropertyValuePresent(CodeAttribute attribute, string name, string value)
        {
            foreach (CodeAttributeArgument property in attribute.Children)
            {
                if (String.Equals(property.Name, name, StringComparison.Ordinal) &&
                    String.Equals(property.Value, value, StringComparison.Ordinal))
                {
                    return true;
                }
            }

            return false;
        }

        // Call this to determine if property has scaffolding enabled
        private static bool IsScaffoldColumn(CodeProperty propertyType)
        {
            foreach (CodeAttribute attribute in propertyType.Attributes)
            {
                if (String.Equals(attribute.FullName, TypeNames.ScaffoldColumnAttributeTypeName, StringComparison.Ordinal))
                {
                    return IsPropertyValuePresent(attribute: attribute,
                                                  name: String.Empty,
                                                  value: "true");
                }
            }
            return true;
        }
    }
}
